[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "band-management"
version = "0.0.6"
description = "Band management web server"
readme = "README.md"
requires-python = ">=3.13"
license = "Apache-2.0"
authors = [
  { name = "Pierre Verkest", email = "pierre@verkest.fr" },
]
dynamic = ["__version__"]

dependencies = [
    "aiofile",
    "anyblok",
    "anyblok-fastapi",
    "babel",
    "bcrypt<4.0.0",
    "jinja2",
    "passlib",
    "psycopg",
    "pydantic[email]",
    "pydantic-extra-types",
    "pycountry",
    "python-jose[cryptography]",
    "python-multipart",
    "uuid7",
    "weasyprint",
    "qrcode[pil]",
]

[project.scripts]
musicbrainz-importer = "band_management.bloks.music_brainz.scripts.musicbrainz_importer:sync"

[project.entry-points.bloks]
http-auth-base="band_management.bloks.http_auth_base:HTTPAuthBase"
band-management-base="band_management.bloks.bm_base:BandManagementBase"
band-management-event="band_management.bloks.bm_event:BandManagementEvent"
band-management-report="band_management.bloks.bm_report:BandManagementReport"
band-management-responsive-webapp="band_management.bloks.bm_responsive_webapp:BandManagementResponsiveWebApp"
band-management="band_management.bloks.band_management:BandManagement"
music-brainz="band_management.bloks.music_brainz:MusicBrainz"


[dependency-groups]
dev = [
  "pytest",
  "pytest-cov",
  "httpx>=0.28.1",
  "pytest-asyncio",
  "freezegun",
]

[tool.hatch.version]
path = "src/band_management/__init__.py"

[tool.uv.sources]
anyblok-fastapi = { git = "git+https://github.com/AnyBlok/AnyBlok_fastapi", branch="master" }

[tool.coverage.run]
branch = true
omit = [
  "__init__.py",
  "*/tests/*",
  "conftest.py",
  "config.py",
]

[tool.coverage.report]
show_missing = true

[tool.babel]
mapping_file = "babel.cfg"

[tool.bumpversion]
current_version = "0.0.6"
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
ignore_missing_files = false
tag = true
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Release Version: {new_version}"
allow_dirty = false
commit = true
message = "Bump version: {current_version} â†’ {new_version}"
moveable_tags = []
commit_args = ""
setup_hooks = []
pre_commit_hooks = []
post_commit_hooks = []

[[tool.bumpversion.files]]
filename = "uv.lock"
search = "name = \"band-management\"\nversion = \"{current_version}\""
replace = "name = \"band-management\"\nversion = \"{new_version}\""